<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构与算法 on Sooner or later, personal blog</title>
    <link>https://denstiny.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on Sooner or later, personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 14 Mar 2022 03:04:12 +0800</lastBuildDate><atom:link href="https://denstiny.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(leetcode)最长回文串</title>
      <link>https://denstiny.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 14 Mar 2022 03:04:12 +0800</pubDate>
      
      <guid>https://denstiny.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>(leetcode) 最长回文串  题目描述  解题思路   代码实现  测试效果      (leetcode) 最长回文串 题目描述  给你一个字符串 s，找到 s 中最长的回文子串.
 示例 1：
输入：s = &amp;ldquo;babad&amp;rdquo;
输出：&amp;ldquo;bab&amp;rdquo;
解释：&amp;ldquo;aba&amp;rdquo; 同样是符合题意的答案。
示例 2：
输入：s = &amp;ldquo;cbbd&amp;rdquo; 输出：&amp;ldquo;bb&amp;rdquo;
  解题思路 使用动态规划
 动态规划,是一种使用空间换时间的算法
 在使用暴力破解的情况下，我们需要对每个位置的字符， 进行暴力穷举
 事例：string: acvcac     0 1 2 3 4 5     a c v c a c     暴力破解:</description>
    </item>
    
  </channel>
</rss>

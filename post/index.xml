<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sooner or later, personal blog</title>
    <link>https://denstiny.github.io/post/</link>
    <description>Recent content in Posts on Sooner or later, personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 14 Mar 2022 03:04:12 +0800</lastBuildDate><atom:link href="https://denstiny.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(leetcode)最长回文串</title>
      <link>https://denstiny.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 14 Mar 2022 03:04:12 +0800</pubDate>
      
      <guid>https://denstiny.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>(leetcode) 最长回文串  题目描述  解题思路   代码实现  测试效果      (leetcode) 最长回文串 题目描述  给你一个字符串 s，找到 s 中最长的回文子串.
 示例 1：
输入：s = &amp;ldquo;babad&amp;rdquo;
输出：&amp;ldquo;bab&amp;rdquo;
解释：&amp;ldquo;aba&amp;rdquo; 同样是符合题意的答案。
示例 2：
输入：s = &amp;ldquo;cbbd&amp;rdquo; 输出：&amp;ldquo;bb&amp;rdquo;
  解题思路 使用动态规划
 动态规划,是一种使用空间换时间的算法
 在使用暴力破解的情况下，我们需要对每个位置的字符， 进行暴力穷举
 事例：string: acvcac     0 1 2 3 4 5     a c v c a c     暴力破解:</description>
    </item>
    
    <item>
      <title>Neovim空行不显示隐藏符号</title>
      <link>https://denstiny.github.io/neovim%E7%A9%BA%E8%A1%8C%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%9E%E8%BD%A6%E7%AC%A6%E5%8F%B7/</link>
      <pubDate>Wed, 02 Mar 2022 15:04:50 +0800</pubDate>
      
      <guid>https://denstiny.github.io/neovim%E7%A9%BA%E8%A1%8C%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%9E%E8%BD%A6%E7%AC%A6%E5%8F%B7/</guid>
      <description>neovim/vim 空行不显示特殊符号  正常情况 解决办法  效果      neovim/vim 空行不显示特殊符号  一般我们会使用 set list 来显示特殊符号
 正常情况 set listchars=eol:$,tab:&amp;gt;-,trail:~,extends:&amp;gt;,precedes:&amp;lt;set list但是这样就会有个问题，在一些空行仍然会显示隐藏符号 解决办法  为了解决这个问题，我决定使用vim的虚拟文本进行显示这些字符
 基本使用
  nvim_buf_set_virtual_text(0,1000,line,chunk,{})&amp;#34; buffer,id,行号,虚拟文本,属性&amp;#34; chunk = [[g:VirreturnText,&amp;#39;Activitycharacter&amp;#39;],]&amp;#34; g:VirreturnText = &amp;#39;↵&amp;#39;  完整代码
  highlight default Activitycharacter guifg=#4D557B guibg=#292e42highlight default Activitycharacter_v guifg=#4D557B guibg=bghighlight default Inactivecharacters guifg=#343A55 guibg=bgfunction MygetLine(_line) let s:string = split(getline(a:_line)) if len(s:string) &amp;gt; 0 return 1 endif return 0endfunctionlet g:VirreturnText=&amp;#39;↵&amp;#39;let g:VirReturnTextFunStart = v:truelet g:VirReturnTextFunList = [&amp;#39;startify&amp;#39;,&amp;#39;NvimTree&amp;#39;,&amp;#39;Trouble&amp;#39;,&amp;#39;Outline&amp;#39;,&amp;#39;norg&amp;#39;,&amp;#39;packer&amp;#39;,&amp;#39;lsp-installer&amp;#39;,&amp;#39;toggleterm&amp;#39;,&amp;#39;packer&amp;#39;,&amp;#39;TelescopePrompt&amp;#39;,&amp;#39;CompetiTest&amp;#39;,&amp;#39;help&amp;#39;,&amp;#39;startuptime&amp;#39;]let g:cureLine_ = line(&amp;#39;.</description>
    </item>
    
    <item>
      <title>Python上传图片到图床</title>
      <link>https://denstiny.github.io/python%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Sun, 27 Feb 2022 14:12:21 +0800</pubDate>
      
      <guid>https://denstiny.github.io/python%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/</guid>
      <description>python上传图片到图床  python代码  效果   github链接    python上传图片到图床  代码讲解就不说了，注释应该很详细了,说下为什么写下这个脚本吧
作为一个vim 死忠粉，在使用vim 写makrdown文档的时候，总是为上传图片而犯难，总是要切换到浏览器捣鼓一阵子，比较影响写作体验，所以写下这个脚本
  python代码  postImage.py
  &amp;#34;&amp;#34;&amp;#34; @author : aero (2254228017@qq.com) @file : imagePost @created : 星期六 2月 26, 2022 20:08:57 CST @github : https://github.com/denstiny @blog : https://denstiny.github.io &amp;#34;&amp;#34;&amp;#34;  import os import json import sys import requests import subprocess import datetime   root = {&amp;#39;遇见图床&amp;#39;: {&amp;#39;url&amp;#39;:&amp;#39;https://www.hualigs.cn/api/upload&amp;#39;,  &amp;#39;token&amp;#39;:&amp;#39;xxx&amp;#39;},  &amp;#39;牛图网&amp;#39;:  {&amp;#39;url&amp;#39;:&amp;#39;https://www.</description>
    </item>
    
    <item>
      <title>无聊的一天</title>
      <link>https://denstiny.github.io/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%80%E5%A4%A9/</link>
      <pubDate>Wed, 23 Feb 2022 08:47:19 +0800</pubDate>
      
      <guid>https://denstiny.github.io/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%80%E5%A4%A9/</guid>
      <description> 老师又在讲这些本来一条命令就能安装的东西,非要下载然后解压缩，构建，复制 
  昨天还下雪了了，今天地上全是水，真的是 哎呀这可能是南昌今年最后一场雪了 
 </description>
    </item>
    
    <item>
      <title>Linux自动禁用键盘鼠标</title>
      <link>https://denstiny.github.io/linux%E8%87%AA%E5%8A%A8%E7%A6%81%E7%94%A8%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87/</link>
      <pubDate>Mon, 21 Feb 2022 23:07:55 +0800</pubDate>
      
      <guid>https://denstiny.github.io/linux%E8%87%AA%E5%8A%A8%E7%A6%81%E7%94%A8%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87/</guid>
      <description>linux自动禁用鼠标键盘 我当前使用的是awesome wm桌面环境，由于桌子比较小，所以外接的键盘是直接放在笔记本上面，另外还接了蓝牙鼠标，为了避免误触需要把默认的键盘鼠标禁用掉，但是每次开机都要自己手动禁用感觉很麻烦想写个脚本
xinput 命令查看当前笔记本连接的设备 使用方法
xinput Results:
⎡ Virtual core pointer id=2	[master pointer (3)] ⎜ ↳ Virtual core XTEST pointer id=4	[slave pointer (2)] ⎜ ↳ SYNA1202:00 06CB:CD65 Mouse id=20	[slave pointer (2)] ⎜ ↳ 2.4G Mouse Consumer Control id=15	[slave pointer (2)] ⎜ ↳ 2.4G Mouse id=17	[slave pointer (2)] ⎜ ↳ Compx 2.4G Wireless Receiver Mouse id=13	[slave pointer (2)] ⎜ ↳ Compx 2.4G Wireless Receiver Keyboard id=14	[slave pointer (2)] ⎜ ↳ SYNA1202:00 06CB:CD65 Touchpad id=21	[slave pointer (2)] ⎣ Virtual core keyboard id=3	[master keyboard (2)] ↳ Virtual core XTEST keyboard id=5	[slave keyboard (3)] ↳ Power Button id=6	[slave keyboard (3)] ↳ Video Bus id=7	[slave keyboard (3)] ↳ Video Bus id=8	[slave keyboard (3)] ↳ Power Button id=9	[slave keyboard (3)] ↳ Lid Switch id=10	[slave keyboard (3)] ↳ Sleep Button id=11	[slave keyboard (3)] ↳ Chicony USB2.</description>
    </item>
    
    <item>
      <title>Wezterm终端</title>
      <link>https://denstiny.github.io/wezterm%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Mon, 21 Feb 2022 22:57:34 +0800</pubDate>
      
      <guid>https://denstiny.github.io/wezterm%E7%BB%88%E7%AB%AF/</guid>
      <description>wezterm  使用gpu加速终端，动态渲染终端内容,使用lua作为配置，具有高度自定义
 
配置文件  local wezterm = require &amp;#39;wezterm&amp;#39;;  -- window resize event config require(&amp;#34;wezterm-resize-config&amp;#34;)  -- key require(&amp;#34;key-bind&amp;#34;)  -- A helper function for my fallback fonts  function font_with_fallback(name, params)  local names = {name, &amp;#34;DengXian&amp;#34;,&amp;#34;Noto Color Emoji&amp;#34;, &amp;#34;JetBrains &amp;#34;}  return wezterm.font_with_fallback(names, params) end   wezterm.on(&amp;#34;window-config-reloaded&amp;#34;, function(window, pane)  wezterm.log_info(&amp;#34;the config was reloaded for this window!&amp;#34;); end)   return {  warn_about_missing_glyphs=false,  window_padding = {  left = 0,  right = 0,  top = 0,  bottom = 0  },  color_scheme = &amp;#34;Lavandula&amp;#34;,  scrollback_lines=99999,  harfbuzz_features = {&amp;#34;zero&amp;#34;},  hide_tab_bar_if_only_one_tab = false,  enable_tab_bar = false,  freetype_load_target = &amp;#34;Light&amp;#34;,  font_size = 16.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;实现http服务器</title>
      <link>https://denstiny.github.io/c-%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sun, 04 Apr 2021 19:44:34 +0800</pubDate>
      
      <guid>https://denstiny.github.io/c-%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>c++ 实现http服务器 cpp 代码实现 main.cpp /** * File : main/main.cpp * Author : denstiny &amp;lt;2254228017@qq.com&amp;gt; * Date : 04.04.2021 * Last Modified Date: 04.04.2021 * Last Modified By : denstiny &amp;lt;2254228017@qq.com&amp;gt; */ #include &amp;#34;../include/http.hpp&amp;#34;#include &amp;lt;csignal&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;iterator&amp;gt;#include &amp;lt;strings.h&amp;gt;#include &amp;lt;sys/socket.h&amp;gt;#include &amp;lt;sys/wait.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;wait.h&amp;gt;  int main( int argc, char *argv[] ) {  ServerHander head;  int serverfd = head.InitServer(), clientfd = -1;  struct sockaddr_in clinetaddr;  bzero(&amp;amp;clinetaddr, sizeof(clinetaddr));  socklen_t clientlen = sizeof(clinetaddr);  cout &amp;lt;&amp;lt; &amp;#34;等待连接&amp;#34; &amp;lt;&amp;lt; endl;  pid_t pid = fork();     while (1) {  /* 开始执行任务 */   /* 利用多进程内存不会共享原理,调用多线程来做心跳包,当客户端接收到请求,则创建一个新的进程,来处理 客户端数据,当客户端数据合法,则作出回应,并新建一个线程,在有效时间内,客户端没有继续发送请求则 断开连接 */   /* 父进程 */  if(pid &amp;gt; 0) { // 主进程负责接受请求  while(( clientfd = accept(serverfd, (struct sockaddr *)&amp;amp;clinetaddr, &amp;amp;clientlen) ) !</description>
    </item>
    
  </channel>
</rss>
